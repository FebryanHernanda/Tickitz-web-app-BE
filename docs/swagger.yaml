basePath: /
definitions:
  handlers.LoginResponse:
    properties:
      message:
        example: Login successful
        type: string
      success:
        example: true
        type: boolean
      token:
        example: your token...
        type: string
    type: object
  models.CinemaScheduleLocation:
    properties:
      cinema_id:
        type: integer
      location_id:
        type: integer
      schedule_id:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
      success:
        example: false
        type: boolean
    type: object
  models.LoginUser:
    properties:
      email:
        example: user@mail.com
        type: string
      password:
        example: your_password
        type: string
    required:
    - email
    - password
    type: object
  models.OrderRequest:
    properties:
      cinemas_schedule_id:
        example: 1
        type: integer
      is_active:
        type: boolean
      is_paid:
        type: boolean
      payment_method_id:
        example: 2
        type: integer
      seats:
        items:
          $ref: '#/definitions/models.OrderSeatInput'
        type: array
      total_prices:
        example: 120000
        type: number
    required:
    - cinemas_schedule_id
    - payment_method_id
    - seats
    - total_prices
    type: object
  models.OrderSeatInput:
    properties:
      seat_id:
        type: integer
      status:
        type: string
    type: object
  models.RegisterUser:
    properties:
      email:
        example: user@mail.com
        type: string
      password:
        example: User@testing123
        minLength: 8
        type: string
      role:
        example: user
        type: string
    required:
    - email
    - password
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      success:
        example: true
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for book ticket cinemas
  title: Tickitz Booking API
  version: "1.0"
paths:
  /admin/movies:
    get:
      description: Retrieve list of all movies (admin access required)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all movies
      tags:
      - Admin
  /admin/movies/add:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Add Movies with all the relations (genres, cast, and schedules)
        Schedule Time ENUM [10:00,13:00,16:00,19:00,22:00]
      parameters:
      - description: Movie Title
        in: formData
        name: title
        type: string
      - description: Movie Synopsis
        in: formData
        name: synopsis
        type: string
      - description: Release Date (YYYY-MM-DD)
        in: formData
        name: release_date
        type: string
      - description: Movie Rating
        in: formData
        name: rating
        type: number
      - description: Age Rating
        in: formData
        name: age_rating
        type: string
      - description: Duration (minutes)
        in: formData
        name: duration
        type: integer
      - description: Director ID
        in: formData
        name: director_id
        type: integer
      - description: Genres [IDs, comma separated]
        in: formData
        name: genres
        type: string
      - description: Casts [IDs, comma separated]
        in: formData
        name: casts
        type: string
      - description: 'Schedules (JSON array: [{}])'
        in: formData
        name: schedules
        required: true
        type: string
      - description: Poster file
        in: formData
        name: poster
        type: file
      - description: Backdrop file
        in: formData
        name: backdrop
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add New Movie
      tags:
      - Admin
  /admin/movies/cinemaschedule/add:
    post:
      description: Add cinemas schedule
      parameters:
      - description: Add cinemas and location schedule data
        in: body
        name: user
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CinemaScheduleLocation'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add Cinemas Schedule
      tags:
      - Admin
  /admin/movies/delete/{id}:
    delete:
      description: Delete a movie and all related data by movie ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie by ID
      tags:
      - Admin
  /admin/movies/edit/{id}:
    patch:
      consumes:
      - multipart/form-data
      description: Update movie data by ID, allow uploading poster and backdrop.
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie Title
        in: formData
        name: title
        type: string
      - description: Movie Synopsis
        in: formData
        name: synopsis
        type: string
      - description: Release Date (YYYY-MM-DD)
        in: formData
        name: release_date
        type: string
      - description: Movie Rating
        in: formData
        name: rating
        type: number
      - description: Age Rating
        in: formData
        name: age_rating
        type: string
      - description: Duration (minutes)
        in: formData
        name: duration
        type: integer
      - description: Director ID
        in: formData
        name: director_id
        type: integer
      - description: Genres [IDs, comma separated]
        in: formData
        name: genres
        type: string
      - description: Casts [IDs, comma separated]
        in: formData
        name: casts
        type: string
      - description: 'Schedules (JSON array: [{}])'
        in: formData
        name: schedules
        type: string
      - description: Poster file
        in: formData
        name: poster
        type: file
      - description: Backdrop file
        in: formData
        name: backdrop
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update movie with file upload
      tags:
      - Admin
  /admin/movies/schedule:
    get:
      description: Get movies schedules for check the id to add cinemas schedule
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get movies schedules
      tags:
      - Admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the JWT token by adding it to Redis blacklist so it
        cannot be used again
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Token is required or unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error during logout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user and invalidate JWT token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email, password, and role.
      parameters:
      - description: Register User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /cinemas:
    get:
      description: Retrieve cinema schedules filtered by location, date, and time
        with pagination
      parameters:
      - description: Location Filter
        in: query
        name: location
        type: string
      - description: Date Filter (YYYY-MM-DD)
        in: query
        name: date
        type: string
      - description: Time Filter (HH:MM)
        in: query
        name: time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get cinema schedules by filter
      tags:
      - Cinemas
  /cinemas/available-seats/{cinemas_schedule_id}:
    get:
      description: Retrieve list of available seats by cinema schedule ID
      parameters:
      - description: Cinema Schedule ID
        in: path
        name: cinemas_schedule_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get available seats for a cinema schedule
      tags:
      - Cinemas
  /movies:
    get:
      description: Retrieve movies filtered by search keyword and genre with pagination
      parameters:
      - description: Search keyword
        in: query
        name: search
        type: string
      - description: Genre filter
        in: query
        name: genre
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get movies by filter
      tags:
      - Movies
  /movies/{id}/details:
    get:
      description: Retrieve detailed information of a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get movie detail
      tags:
      - Movies
  /movies/popular:
    get:
      description: Retrieve a list of popular movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get popular movies
      tags:
      - Movies
  /movies/schedules:
    get:
      description: Retrieve the schedule of movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get movie schedules
      tags:
      - Movies
  /movies/upcoming:
    get:
      description: Retrieve a list of upcoming movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get upcoming movies
      tags:
      - Movies
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new order
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.OrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Order
      tags:
      - Orders
  /orders/history:
    get:
      description: Retrieve a user's order history
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order history by user ID
      tags:
      - Orders
  /profile:
    get:
      description: Retrieve user profile by user ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile by ID
      tags:
      - Profile
  /profile/edit:
    patch:
      consumes:
      - multipart/form-data
      description: Update the profile of the logged-in user. Supports optional file
        upload for image.
      parameters:
      - description: Email
        in: formData
        name: email
        type: string
      - description: Old Password
        in: formData
        name: old_password
        type: string
      - description: New Password
        in: formData
        name: new_password
        type: string
      - description: First Name
        in: formData
        name: first_name
        type: string
      - description: Last Name
        in: formData
        name: last_name
        type: string
      - description: Phone Number
        in: formData
        name: phone_number
        type: string
      - description: Profile Image
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user's profile
      tags:
      - Profile
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
